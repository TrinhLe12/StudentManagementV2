// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentManagementV2.Core.Models;

namespace StudentManagementV2.Core.Migrations
{
    [DbContext(typeof(StudentManagementContext))]
    partial class StudentManagementContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("StudentManagementV2.Core.Models.AssignClass", b =>
                {
                    b.Property<string>("ClassId")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .HasColumnName("CLASS_ID")
                        .IsFixedLength(true);

                    b.Property<string>("ClassName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CLASS_NAME");

                    b.Property<string>("DeptId")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("DEPT_ID")
                        .IsFixedLength(true);

                    b.HasKey("ClassId");

                    b.HasIndex("DeptId");

                    b.ToTable("ASSIGN_CLASS");
                });

            modelBuilder.Entity("StudentManagementV2.Core.Models.Department", b =>
                {
                    b.Property<string>("DeptId")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("DEPT_ID")
                        .IsFixedLength(true);

                    b.Property<string>("DeptName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DEPT_NAME");

                    b.HasKey("DeptId");

                    b.ToTable("DEPARTMENT");
                });

            modelBuilder.Entity("StudentManagementV2.Core.Models.Loggin", b =>
                {
                    b.Property<string>("LogginId")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("LOGGIN_ID")
                        .IsFixedLength(true);

                    b.Property<string>("LogginName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LOGGIN_NAME");

                    b.Property<string>("Password")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("PASSWORD");

                    b.Property<string>("UserId")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("USER_ID")
                        .IsFixedLength(true);

                    b.HasKey("LogginId");

                    b.HasIndex("UserId");

                    b.ToTable("LOGGIN");
                });

            modelBuilder.Entity("StudentManagementV2.Core.Models.Role", b =>
                {
                    b.Property<string>("RoleId")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("ROLE_ID")
                        .IsFixedLength(true);

                    b.Property<string>("RoleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ROLE_NAME");

                    b.HasKey("RoleId");

                    b.ToTable("ROLE");
                });

            modelBuilder.Entity("StudentManagementV2.Core.Models.Semester", b =>
                {
                    b.Property<string>("SemesterId")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .HasColumnName("SEMESTER_ID")
                        .IsFixedLength(true);

                    b.Property<string>("SemesterName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SEMESTER_NAME");

                    b.HasKey("SemesterId");

                    b.ToTable("SEMESTER");
                });

            modelBuilder.Entity("StudentManagementV2.Core.Models.Subject", b =>
                {
                    b.Property<string>("SubjectId")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .HasColumnName("SUBJECT_ID")
                        .IsFixedLength(true);

                    b.Property<string>("SubjectName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SUBJECT_NAME");

                    b.HasKey("SubjectId");

                    b.ToTable("SUBJECT");
                });

            modelBuilder.Entity("StudentManagementV2.Core.Models.SubjectRegister", b =>
                {
                    b.Property<string>("StudentId")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("STUDENT_ID")
                        .IsFixedLength(true);

                    b.Property<string>("SubjectId")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .HasColumnName("SUBJECT_ID")
                        .IsFixedLength(true);

                    b.Property<string>("SemesterId")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .HasColumnName("SEMESTER_ID")
                        .IsFixedLength(true);

                    b.Property<short>("Year")
                        .HasColumnType("smallint")
                        .HasColumnName("YEAR");

                    b.Property<decimal?>("Score1")
                        .HasColumnType("numeric(4,2)")
                        .HasColumnName("SCORE_1");

                    b.Property<decimal?>("Score2")
                        .HasColumnType("numeric(4,2)")
                        .HasColumnName("SCORE_2");

                    b.HasKey("StudentId", "SubjectId", "SemesterId", "Year");

                    b.HasIndex("SemesterId");

                    b.HasIndex("SubjectId");

                    b.ToTable("SUBJECT_REGISTER");
                });

            modelBuilder.Entity("StudentManagementV2.Core.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("USER_ID")
                        .IsFixedLength(true);

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ADDRESS");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("date")
                        .HasColumnName("BIRTHDATE");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("IdentityId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("IDENTITY_ID");

                    b.Property<string>("Phone")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("PHONE");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("ROLE_ID")
                        .IsFixedLength(true);

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("USER_NAME");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("USER");

                    b.HasDiscriminator<string>("RoleId").HasValue("User");
                });

            modelBuilder.Entity("StudentManagementV2.Core.Models.Admin", b =>
                {
                    b.HasBaseType("StudentManagementV2.Core.Models.User");

                    b.HasDiscriminator().HasValue("R03");
                });

            modelBuilder.Entity("StudentManagementV2.Core.Models.Instructor", b =>
                {
                    b.HasBaseType("StudentManagementV2.Core.Models.User");

                    b.Property<string>("DeptId")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("DEPT_ID")
                        .IsFixedLength(true);

                    b.HasIndex("DeptId");

                    b.HasDiscriminator().HasValue("R02");
                });

            modelBuilder.Entity("StudentManagementV2.Core.Models.Student", b =>
                {
                    b.HasBaseType("StudentManagementV2.Core.Models.User");

                    b.Property<string>("ClassId")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .HasColumnName("CLASS_ID")
                        .IsFixedLength(true);

                    b.HasIndex("ClassId");

                    b.HasDiscriminator().HasValue("R01");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentManagementV2.Core.Models.AssignClass", b =>
                {
                    b.HasOne("StudentManagementV2.Core.Models.Department", "Dept")
                        .WithMany("AssignClasses")
                        .HasForeignKey("DeptId")
                        .HasConstraintName("FK_ASSIGN_CLASS_DEPARTMENT")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Dept");
                });

            modelBuilder.Entity("StudentManagementV2.Core.Models.Loggin", b =>
                {
                    b.HasOne("StudentManagementV2.Core.Models.User", "User")
                        .WithMany("Loggins")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_LOGGIN_USER")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudentManagementV2.Core.Models.SubjectRegister", b =>
                {
                    b.HasOne("StudentManagementV2.Core.Models.Semester", "Semester")
                        .WithMany("SubjectRegisters")
                        .HasForeignKey("SemesterId")
                        .HasConstraintName("FK_SUBJECT_REGISTER_SEMESTER")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagementV2.Core.Models.User", "Student")
                        .WithMany("SubjectRegisters")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_SUBJECT_REGISTER_USER")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagementV2.Core.Models.Subject", "Subject")
                        .WithMany("SubjectRegisters")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FK_SUBJECT_REGISTER_SUBJECT")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Semester");

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("StudentManagementV2.Core.Models.User", b =>
                {
                    b.HasOne("StudentManagementV2.Core.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_USER_ROLE")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("StudentManagementV2.Core.Models.Instructor", b =>
                {
                    b.HasOne("StudentManagementV2.Core.Models.Department", "Dept")
                        .WithMany("Instructors")
                        .HasForeignKey("DeptId")
                        .HasConstraintName("FK_USER_DEPARTMENT")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Dept");
                });

            modelBuilder.Entity("StudentManagementV2.Core.Models.Student", b =>
                {
                    b.HasOne("StudentManagementV2.Core.Models.AssignClass", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_USER_ASSIGN_CLASS")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Class");
                });

            modelBuilder.Entity("StudentManagementV2.Core.Models.AssignClass", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("StudentManagementV2.Core.Models.Department", b =>
                {
                    b.Navigation("AssignClasses");

                    b.Navigation("Instructors");
                });

            modelBuilder.Entity("StudentManagementV2.Core.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("StudentManagementV2.Core.Models.Semester", b =>
                {
                    b.Navigation("SubjectRegisters");
                });

            modelBuilder.Entity("StudentManagementV2.Core.Models.Subject", b =>
                {
                    b.Navigation("SubjectRegisters");
                });

            modelBuilder.Entity("StudentManagementV2.Core.Models.User", b =>
                {
                    b.Navigation("Loggins");

                    b.Navigation("SubjectRegisters");
                });
#pragma warning restore 612, 618
        }
    }
}
